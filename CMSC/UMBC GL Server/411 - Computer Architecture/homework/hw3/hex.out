GNU gdb Fedora (6.8-27.el5)
Copyright (C) 2008 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i386-redhat-linux-gnu"...
(gdb) list 1,26
1	/* matmul2.c  100*100 matrix element by element multiply */
2	#include <stdio.h>
3	
4	int main()
5	{
6	  const int N = 100;
7	  double a[N][N]; /* input matrix */
8	  double b[N][N]; /* input matrix */
9	  double c[N][N]; /* result matrix */
10	  int i,j;
11	
12	  printf("starting multiply \n");
13	  a[1][1] = 3.5;
14	  b[1][1] =1.2; /* not a valid benchmark, most elements zero */
15	
16	  for(i=0; i<N; i++){
17	    for(j=0; j<N; j++){
18	front:
19	        c[i][j] = a[i][j]*b[i][j]; /* most time spent here! */
20	back:;
21	    }
22	  }
23	  printf("a result %g \n", c[1][1]); /* prevent dead code elimination */
24	  return 0;
25	}
26	
(gdb) break main
Breakpoint 1 at 0x80483cf: file matmul2.c, line 13.
(gdb) run
Starting program: /afs/umbc.edu/users/c/h/chrmai1/home/411/homework/hw3/a.out 

Breakpoint 1, main () at matmul2.c:13
13	  a[1][1] = 3.5;
(gdb) disassemble
Dump of assembler code for function main:
0x080483c0 <main+0>:	lea    0x4(%esp),%ecx
0x080483c4 <main+4>:	and    $0xfffffff0,%esp
0x080483c7 <main+7>:	pushl  -0x4(%ecx)
0x080483ca <main+10>:	push   %ebp
0x080483cb <main+11>:	mov    %esp,%ebp
0x080483cd <main+13>:	push   %edi
0x080483ce <main+14>:	push   %esi
0x080483cf <main+15>:	xor    %esi,%esi
0x080483d1 <main+17>:	push   %ebx
0x080483d2 <main+18>:	mov    $0x400c0000,%ebx
0x080483d7 <main+23>:	push   %ecx
0x080483d8 <main+24>:	sub    $0x18,%esp
0x080483db <main+27>:	mov    %esp,-0x14(%ebp)
0x080483de <main+30>:	sub    $0x13890,%esp
0x080483e4 <main+36>:	lea    0x1b(%esp),%eax
0x080483e8 <main+40>:	sub    $0x13890,%esp
0x080483ee <main+46>:	and    $0xfffffff0,%eax
0x080483f1 <main+49>:	mov    %eax,-0x18(%ebp)
0x080483f4 <main+52>:	lea    0x1b(%esp),%eax
0x080483f8 <main+56>:	sub    $0x13890,%esp
0x080483fe <main+62>:	and    $0xfffffff0,%eax
0x08048401 <main+65>:	mov    %eax,-0x1c(%ebp)
0x08048404 <main+68>:	lea    0x1b(%esp),%edi
0x08048408 <main+72>:	movl   $0x8048598,(%esp)
0x0804840f <main+79>:	and    $0xfffffff0,%edi
0x08048412 <main+82>:	call   0x80482cc <puts@plt>
0x08048417 <main+87>:	mov    -0x18(%ebp),%eax
0x0804841a <main+90>:	mov    $0x33333333,%ecx
0x0804841f <main+95>:	mov    $0x3ff33333,%edx
0x08048424 <main+100>:	mov    %esi,0x328(%eax)
0x0804842a <main+106>:	xor    %esi,%esi
0x0804842c <main+108>:	mov    %ebx,0x32c(%eax)
0x08048432 <main+114>:	mov    -0x1c(%ebp),%eax
0x08048435 <main+117>:	mov    %ecx,0x328(%eax)
0x0804843b <main+123>:	mov    %edx,0x32c(%eax)
0x08048441 <main+129>:	jmp    0x8048450 <main+144>
0x08048443 <main+131>:	nop    
0x08048444 <main+132>:	nop    
0x08048445 <main+133>:	nop    
0x08048446 <main+134>:	nop    
0x08048447 <main+135>:	nop    
0x08048448 <main+136>:	nop    
0x08048449 <main+137>:	nop    
0x0804844a <main+138>:	nop    
0x0804844b <main+139>:	nop    
0x0804844c <main+140>:	nop    
0x0804844d <main+141>:	nop    
0x0804844e <main+142>:	nop    
0x0804844f <main+143>:	nop    
0x08048450 <main+144>:	mov    -0x18(%ebp),%ebx
0x08048453 <main+147>:	lea    (%esi,%esi,4),%eax
0x08048456 <main+150>:	mov    -0x1c(%ebp),%ecx
0x08048459 <main+153>:	lea    (%eax,%eax,4),%eax
0x0804845c <main+156>:	shl    $0x5,%eax
0x0804845f <main+159>:	lea    (%edi,%eax,1),%edx
0x08048462 <main+162>:	add    %eax,%ebx
0x08048464 <main+164>:	add    %eax,%ecx
0x08048466 <main+166>:	xor    %eax,%eax
0x08048468 <main+168>:	nop    
0x08048469 <main+169>:	lea    0x0(%esi,%eiz,1),%esi
0x08048470 <main+176>:	fldl   (%ebx)
0x08048472 <main+178>:	inc    %eax
0x08048473 <main+179>:	add    $0x8,%ebx
0x08048476 <main+182>:	fmull  (%ecx)
0x08048478 <main+184>:	add    $0x8,%ecx
0x0804847b <main+187>:	fstpl  (%edx)
0x0804847d <main+189>:	add    $0x8,%edx
0x08048480 <main+192>:	cmp    $0x64,%eax
0x08048483 <main+195>:	jne    0x8048470 <main+176>
0x08048485 <main+197>:	inc    %esi
0x08048486 <main+198>:	cmp    $0x64,%esi
0x08048489 <main+201>:	jne    0x8048450 <main+144>
0x0804848b <main+203>:	fldl   0x328(%edi)
0x08048491 <main+209>:	movl   $0x80485ab,(%esp)
0x08048498 <main+216>:	fstpl  0x4(%esp)
0x0804849c <main+220>:	call   0x80482ec <printf@plt>
0x080484a1 <main+225>:	mov    -0x14(%ebp),%esp
0x080484a4 <main+228>:	lea    -0x10(%ebp),%esp
0x080484a7 <main+231>:	pop    %ecx
0x080484a8 <main+232>:	xor    %eax,%eax
0x080484aa <main+234>:	pop    %ebx
0x080484ab <main+235>:	pop    %esi
0x080484ac <main+236>:	pop    %edi
0x080484ad <main+237>:	pop    %ebp
0x080484ae <main+238>:	lea    -0x4(%ecx),%esp
0x080484b1 <main+241>:	ret    
End of assembler dump.
(gdb) x60x main
(gdb) x60  /60x main
0x80483c0 <main>:	0x04244c8d	0xfff0e483	0x8955fc71	0x315657e5
0x80483d0 <main+16>:	0x00bb53f6	0x51400c00	0x8918ec83	0xec81ec65
0x80483e0 <main+32>:	0x00013890	0x1b24448d	0x3890ec81	0xe0830001
0x80483f0 <main+48>:	0xe84589f0	0x1b24448d	0x3890ec81	0xe0830001
0x8048400 <main+64>:	0xe44589f0	0x1b247c8d	0x982404c7	0x83080485
0x8048410 <main+80>:	0xb5e8f0e7	0x8bfffffe	0x33b9e845	0xba333333
0x8048420 <main+96>:	0x3ff33333	0x0328b089	0xf6310000	0x032c9889
0x8048430 <main+112>:	0x458b0000	0x288889e4	0x89000003	0x00032c90
0x8048440 <main+128>:	0x900deb00	0x90909090	0x90909090	0x90909090
0x8048450 <main+144>:	0x8de85d8b	0x4d8bb604	0x80048de4	0x8d05e0c1
0x8048460 <main+160>:	0xc3010714	0xc031c101	0x26b48d90	0x00000000
0x8048470 <main+176>:	0x834003dd	0x09dc08c3	0xdd08c183	0x08c2831a
0x8048480 <main+192>:	0x7564f883	0xfe8346eb	0xddc57564	0x00032887
0x8048490 <main+208>:	0x2404c700	0x080485ab	0x04245cdd	0xfffe4be8
0x80484a0 <main+224>:	0xec658bff	0x59f0658d	0x5e5bc031	0x618d5d5f
(gdb) q
The program is running.  Exit anyway? (y or n) 